name: Build on PR

on:
  pull_request: // PR 이벤트 감지
    branches: // 대상 브랜치 정의
      - dev

jobs:
  build:
    environment: ${{ github.ref_name }} // 실행 환경의 이름, 브랜치 이름으로 설정
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code. // PR이 포함된 브랜치의 내용을 runner에 다운로드
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2 
        name: Install pnpm
        id: pnpm-install
        with:
          version: latest  // 최신 버전의 pnpm 패키지 매니저 설치
          run_install: false

      - name: Install Dependencies // 의존성 설치
        run: pnpm install

      - name: Build # React Build
        run: pnpm run build
        env:
          VITE_SERVER_URL: ${{ vars.VITE_SERVER_URL }}
          VITE_ENV: ${{ vars.VITE_ENV }}



/////////////////


1. React 프로젝트 빌드
2. AWS S3 배포
3. CloudFront 배포

name: React Build & Deploy
on:
  push: # push 이벤트가 일어났을 때만 실행
    branches:
      - dev

jobs:
  build:
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code.
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: latest
          run_install: false

      - name: Cache node modules # node modules 캐싱
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/pnpm-lock.yaml') }}
                # OS 정보(runner.OS)와 pnpm-lock.yaml 파일의 해시값으로 생성된 고유 값.
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
          # 캐시가 없으면 기본 복구 키를 사용(restore-keys)하여 가능한 캐시를 복구.

      - name: Install Dependencies # 의존 파일 설치
        run: pnpm install

      - name: Build # React Build
        run: pnpm run build
        env:
          VITE_SERVER_URL: ${{ vars.VITE_SERVER_URL }}
          VITE_ENV: ${{ vars.VITE_ENV }}

      - name: Configure AWS credentials # AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Remove previous JS bundles # S3에 clear, 이전에 업로드된 assets 디렉토리 내용 삭제
        run: |
          aws s3 rm --recursive --region ap-northeast-2 ${{ vars.AWS_S3_ADDRESS }}/assets/

      - name: Deploy # S3에 배포하기
        run: | # 빌드 결과물(dist 디렉토리)을 S3 버킷에 복사
          aws s3 cp \
            --recursive \  # 모든 하위 디렉토리와 파일 포함
            --region ap-northeast-2 \
            dist ${{ vars.AWS_S3_ADDRESS }}

      - name: Cloudfront Invalidation # Cloudfront 무효화, 새 빌드가 즉시 반영되도록
        uses: chetan/invalidate-cloudfront-action@master
        env:
          DISTRIBUTION: ${{ secrets.DISTRIBUTION }}
          PATHS: "/*" # 전체 경로 무효화
          AWS_REGION: "ap-northeast-2"
          AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
